version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: ${POSTGRES_IMAGE:-postgres:15-alpine}
    container_name: ${POSTGRES_CONTAINER_NAME:-krakedev_postgres}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-simulador_emprendimientos}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin123}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - krakedev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-simulador_emprendimientos}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin para gesti√≥n de base de datos
  pgadmin:
    image: ${PGADMIN_IMAGE:-dpage/pgadmin4:latest}
    container_name: ${PGADMIN_CONTAINER_NAME:-krakedev_pgadmin}
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@krakedev.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - krakedev_network
    depends_on:
      postgres:
        condition: service_healthy

  # Backend NestJS
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${BACKEND_CONTAINER_NAME:-krakedev_backend}
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:admin123@postgres:5432/simulador_emprendimientos?schema=public}
      PORT: ${BACKEND_PORT:-3000}
      API_KEY: ${API_KEY}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - krakedev_network
    depends_on:
      postgres:
        condition: service_healthy
    command: ./scripts/init.sh

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  krakedev_network:
    driver: bridge
